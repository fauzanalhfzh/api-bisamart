generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VehicleType {
  MOBIL
  MOTOR
}

enum UserStatus {
  INACTIVE
  ACTIVE
}

enum OrderStatus {
  PENDING
  ACCEPTED
  COMPLETED
  CANCELLED
}

enum StatusPayment {
  PAID
  PENDING
  FAILED
}

model User {
  id           String  @id @default(uuid())
  name         String?
  phone_number String  @unique
  email        String  @unique
  password     String
  ratings      Float   @default(0)
  total_ride   Float   @default(0)
  total_order  Float   @default(0)
  token        String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  rides Ride[]  @relation("user_rides")
  Order Order[] @relation("user_orders")

  @@map("users")
}

model Driver {
  id                  String      @id @default(uuid())
  name                String
  phone_number        String      @unique
  email               String      @unique
  password            String
  country             String
  ktp                 String      @unique
  address_ktp         String
  ktp_img             String
  vehicle_type        VehicleType @default(MOTOR)
  sim                 String      @unique
  sim_img             String
  selfie_with_sim     String
  vehicle_brand       String
  vehicle_color       String
  license_plate       String
  registration_number String
  profile_img         String
  ratings             Float       @default(0)
  total_earning       Float       @default(0)
  total_rides         Float       @default(0)
  pending_rides       Float       @default(0)
  cancel_rides        Float       @default(0)
  status              UserStatus  @default(INACTIVE)
  token               String?     @db.VarChar(100)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  rides Ride[] @relation("driver_rides")

  @@map("drivers")
}

model Ride {
  id                        String      @id @default(uuid())
  user_id                   String
  driver_id                 String
  coupon_id                 String?
  charge                    Float
  current_location_name     String
  destination_location_name String
  distance                  Float
  status                    OrderStatus @default(PENDING)
  rating                    Float?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User    @relation("user_rides", fields: [user_id], references: [id])
  driver Driver  @relation("driver_rides", fields: [driver_id], references: [id])
  coupon Coupon? @relation("coupon_rides", fields: [coupon_id], references: [id])

  @@map("rides")
}

model Coupon {
  id              String   @id @default(uuid())
  coupon_name     String?
  coupon_code     String
  discount_amount Float
  expiration_date DateTime
  usage_limit     Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Ride Ride[] @relation("coupon_rides")

  @@map("coupons")
}

model Merchant {
  id            String     @id @default(uuid())
  name          String
  phone_number  String     @unique
  email         String     @unique
  password      String
  merchant_name String
  address       String
  open_time     String
  close_time    String
  status        UserStatus @default(INACTIVE)
  token         String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  product Product[] @relation("merchant_product")

  @@map("merchants")
}

model Product {
  id           String @id @default(uuid())
  product_name String
  description  String
  price        Float
  stock        Int
  category_id  String
  merchant_id  String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  merchant Merchant   @relation("merchant_product", fields: [merchant_id], references: [id])
  category Category[] @relation("category_product")
  Item     Item[]     @relation("product_item")

  @@map("products")
}

model Category {
  id            String @id @default(uuid())
  category_name String
  description   String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Product Product[] @relation("category_product")

  @@map("categories")
}

model Order {
  id          String      @id @default(uuid())
  order_date  DateTime
  user_id     String
  total_price Float
  status      OrderStatus @default(PENDING)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User      @relation("user_orders", fields: [user_id], references: [id])
  Item    Item[]    @relation("orders_item")
  Payment Payment[] @relation("payment_orders")

  @@map("orders_mart")
}

model Item {
  id         String @id @default(uuid())
  order_id   String
  product_id String
  quantity   Int
  unit_price Float
  sub_total  Float

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  order   Order   @relation("orders_item", fields: [order_id], references: [id])
  product Product @relation("product_item", fields: [product_id], references: [id])

  @@map("orders_items")
}

model Payment {
  id             String        @id @default(uuid())
  order_id       String
  payment_date   DateTime
  payment_method String
  amount_paid    Float
  status         StatusPayment

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  order Order @relation("payment_orders", fields: [order_id], references: [id])
}
