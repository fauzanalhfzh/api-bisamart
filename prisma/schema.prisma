generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  CUSTOMER
  MERCHANT
  COURIER
}

enum OrderStatus {
  PENDING
  ACCEPTED
  COMPLETED
  CANCELLED
}

enum CourierStatus {
  ONLINE
  OFFLINE
}

enum MerchantStatus {
  BUKA
  TUTUP
  TAHAN
}

model User {
  id Int @id @default(autoincrement())

  name         String
  email        String  @unique
  phone_number String  @unique
  password     String
  roles        Roles   @default(CUSTOMER)
  is_verified  Boolean @default(false)

  token String?

  OTP           UserOTP[]            @relation("user_otp")
  ResetPassword PasswordResetToken[] @relation("reset_password")

  Customer  Customer? @relation("user_customer")
  Merchant  Merchant? @relation("user_merchant")
  Courier   Courier?  @relation("user_courier")
  Addresses Address[] @relation("user_address")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("users")
}

model UserOTP {
  id        Int      @id @default(autoincrement())
  user_id   Int      @unique
  otp       String
  expiresAt DateTime

  User User @relation("user_otp", fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_otp")
}

model PasswordResetToken {
  id      String @id @default(uuid())
  user_id Int    @unique

  token     String
  expiresAt DateTime

  user User @relation("reset_password", fields: [user_id], references: [id], onDelete: Cascade)

  @@map("password_reset_token")
}

model Customer {
  id Int @id @default(autoincrement())

  user_id       Int     @unique
  photo_profile String?

  ratings Float @default(0)

  total_order   Int @default(0)
  pending_order Int @default(0)
  cancel_order  Int @default(0)

  User User @relation("user_customer", fields: [user_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("customers")
}

model Merchant {
  id Int @id @default(autoincrement())

  user_id              Int @unique
  merchant_category_id Int @unique

  ktp            String @unique
  ktp_photo      String
  place_of_birth String
  date_of_birth  DateTime
  address_ktp    String
  self_photo     String

  bank_name         String
  account_number    String
  owner_name        String
  saving_book_photo String

  status MerchantStatus @default(TUTUP)

  merchant_name String

  ratings       Float @default(0)
  total_earning Float @default(0)

  total_order   Int @default(0)
  pending_order Int @default(0)
  cancel_order  Int @default(0)

  User             User                     @relation("user_merchant", fields: [user_id], references: [id])
  MerchantCategory MerchantCategory         @relation("merchant_category", fields: [merchant_category_id], references: [id])
  operating_hours  MerchantOperatingHours[] @relation("operating_hours")
  product          Product[]                @relation("merchant_product")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("merchants")
}

model Courier {
  id Int @id @default(autoincrement())

  user_id Int @unique

  date_of_birth         DateTime
  address_ktp           String
  ktp                   String   @unique
  ktp_photo             String
  selfie_with_sim_photo String
  profile_photo         String

  vehicle_brand       String
  vehicle_color       String
  vehicle_speed       Int
  registration_number String
  license_plate       String
  license_photo       String

  status CourierStatus @default(OFFLINE)

  ratings       Float @default(0)
  total_earning Float @default(0)

  total_rides   Int @default(0)
  pending_rides Int @default(0)
  cancel_rides  Int @default(0)

  User User @relation("user_courier", fields: [user_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("couriers")
}

model MerchantCategory {
  id Int @id @default(autoincrement())

  name String @unique

  Merchant Merchant[] @relation("merchant_category")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("merchant_category")
}

model Address {
  id Int @id @default(autoincrement())

  user_id Int

  address_line String
  city         String
  state        String
  postal_code  String

  latitude  Float?
  longitude Float?

  is_primary Boolean

  User User? @relation("user_address", fields: [user_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("addresses")
}

model MerchantOperatingHours {
  id Int @id @default(autoincrement())

  merchant_id Int

  day_of_week String
  is_24_hours Boolean @default(false)
  open_time   String
  close_time  String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  merchant Merchant @relation("operating_hours", fields: [merchant_id], references: [id])

  @@map("merchant_operating_hours")
}

model Promo {
  id String @id @default(uuid())

  thumbnail       String
  code            String
  name            String?
  discount_amount Float
  expiration_date DateTime
  usage_limit     Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("promo")
}

model Product {
  id Int @id @default(autoincrement())

  image       String
  name        String
  description String?

  price Float
  stock Int
  netto Int

  discount Int?

  merchant_id Int
  category_id Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  merchant Merchant @relation("merchant_product", fields: [merchant_id], references: [id])
  category ProducCategory @relation("product_category", fields: [category_id], references: [id])

  @@map("products")
}

model ProducCategory {
  id Int @id @default(autoincrement())

  name        String  @unique
  description String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  product Product[] @relation("product_category")

  @@map("product_category")
}
