generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  ACCEPTED
  COMPLETED
  CANCELLED
}

enum KurirStatus {
  ONLINE
  OFFLINE
}

enum MerchantStatus {
  BUKA
  TUTUP
  TAHAN
}

enum StatusPayment {
  PAID
  PENDING
  FAILED
}

enum AddressTag {
  RUMAH
  KANTOR
}

model User {
  id           String @id @default(uuid())
  name         String
  email        String @unique
  phone_number String @unique
  password     String

  ratings       Float @default(0)
  total_order   Float @default(0)
  pending_order Float @default(0)
  cancel_order  Float @default(0)

  token String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Order     Order[]   @relation("user_orders")
  Addresses Address[] @relation("user_address")

  @@map("users")
}

model Merchant {
  id           String @id @default(uuid())
  name         String
  email        String @unique
  phone_number String @unique
  password     String

  ktp            String
  ktp_url        String
  place_of_birth String
  date_of_birth  DateTime
  address_ktp    String
  self_photo_url String

  bank_name       String
  account_number  String
  owner_name      String
  saving_book_url String?

  status MerchantStatus @default(TUTUP)

  merchant_name     String
  category_merchant String

  address_line String
  city         String
  state        String
  postal_code  String
  latitude     Float?
  longitude    Float?

  ratings       Float @default(0)
  total_earning Float @default(0)
  total_order   Float @default(0)
  pending_order Float @default(0)
  cancel_order  Float @default(0)

  token String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  operating_hours MerchantOperatingHours[] @relation("operating_hours")
  product         Product[]                @relation("merchant_product")

  @@map("merchants")
}

model Courier {
  id           String @id @default(uuid())
  name         String
  email        String @unique
  phone_number String @unique
  password     String

  address_ktp         String
  ktp                 String
  ktp_url             String
  selfie_with_sim_url String
  profile_url         String

  vehicle_brand       String
  vehicle_color       String
  vehicle_speed       Int
  registration_number String
  license_plate       String
  license_url         String

  status KurirStatus @default(OFFLINE)

  ratings       Float @default(0)
  total_earning Float @default(0)
  total_rides   Float @default(0)
  pending_rides Float @default(0)
  cancel_rides  Float @default(0)

  token String? @db.VarChar(100)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("couriers")
}

model Address {
  id           String     @id @default(uuid())
  user_id      String
  address_line String
  city         String
  state        String
  postal_code  String
  latitude     Float?
  longitude    Float?
  is_primary   Boolean
  tag          AddressTag @default(RUMAH)
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt

  user User @relation("user_address", fields: [user_id], references: [id])

  @@map("addresses")
}

model MerchantOperatingHours {
  id          String  @id @default(uuid())
  merchant_id String
  day_of_week String
  is_24_hours Boolean @default(false)
  open_time   String
  close_time  String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  merchant Merchant @relation("operating_hours", fields: [merchant_id], references: [id])

  @@map("merchant_operating_hours")
}

model Coupon {
  id              String   @id @default(uuid())
  coupon_code     String
  name            String?
  discount_amount Float
  expiration_date DateTime
  usage_limit     Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  order Order[] @relation("coupon_order")

  @@map("coupons")
}

model Product {
  id          String  @id @default(uuid())
  image_url   String
  name        String
  description String?

  price Float
  stock Int
  netto Int

  discount Int?

  merchant_id String
  category_id String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  merchant Merchant @relation("merchant_product", fields: [merchant_id], references: [id])
  category Category @relation("product_category", fields: [category_id], references: [id])
  item     Item[]   @relation("product_item")

  @@map("products")
}

model Category {
  id String @id @default(uuid())

  name        String  @unique
  description String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  product Product[] @relation("product_category")

  @@map("categories")
}

model Order {
  id               String      @id @default(uuid())
  user_id          String
  driver_id        String
  coupon_id        String
  charge           Float
  pickup_name      String
  destination_name String
  distance         String
  status           OrderStatus @default(PENDING)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User      @relation("user_orders", fields: [user_id], references: [id])
  item    Item[]    @relation("orders_item")
  coupon  Coupon?   @relation("coupon_order", fields: [coupon_id], references: [id])
  payment Payment[] @relation("payment_orders")

  @@map("orders")
}

model Item {
  id         String @id @default(uuid())
  order_id   String
  product_id String
  quantity   Int
  unit_price Float
  sub_total  Float

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  order   Order   @relation("orders_item", fields: [order_id], references: [id])
  product Product @relation("product_item", fields: [product_id], references: [id])

  @@map("orders_items")
}

model Payment {
  id             String        @id @default(uuid())
  order_id       String
  payment_date   DateTime
  payment_method String
  amount_paid    Float
  status         StatusPayment @default(PENDING)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  order Order @relation("payment_orders", fields: [order_id], references: [id])

  @@map("payment")
}
